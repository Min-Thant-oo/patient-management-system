# Application name
spring.application.name=patient-service

#NEED TO UNCOMMENT THIS TO USE IN MEMORY DATABASE OUTSIDE OF DOCKER
## H2 Console
#spring.h2.console.path=/h2-console
#
## H2 in-memory DB
#spring.datasource.url=jdbc:h2:mem:testdb
#spring.datasource.driver-class-name=org.h2.Driver
#spring.datasource.username=admin_viewer
#spring.datasource.password=password
#
## JPA and SQL init
#spring.jpa.database-platform=org.hibernate.dialect.H2Dialect
#spring.jpa.hibernate.ddl-auto=update
#spring.sql.init.mode=always
#
## Optional for logging
#spring.jpa.show-sql=true

spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
spring.kafka.producer.value-serializer=org.apache.kafka.common.serialization.ByteArraySerializer

# Port number
server.port=4000

logging.level.root=info

# Circuit breaker

# Example flow
# You call Billing Service.
# If it fails, Retry will:
# Try again after 500ms.
# If still failing, pass failure to Circuit Breaker.
# Circuit Breaker looks at sliding window (last 10 calls).
# If >=50% failed, breaker opens.
# For 10 seconds, all calls fail immediately (fast failure, no waiting).
# After 10s, it moves to half-open and tries 3 calls.
# If those succeed -> circuit closes.
# If fail -> circuit opens again.

# tracks the last 10 calls (successes and failures)
resilience4j.circuitbreaker.instances.billingService.sliding-window-size=10

# Before the breaker even thinks about opening, at least 5 calls must be recorded
resilience4j.circuitbreaker.instances.billingService.minimum-number-of-calls=5

# If 50% or more of calls fail within the sliding window, the breaker opens. If 10 calls happen and 5 fail ? breaker opens.
resilience4j.circuitbreaker.instances.billingService.failure-rate-threshold=50

# Once the breaker is open, it stays open (blocks calls) for 10 seconds. After that, it will move to half-open and allow some test calls.
resilience4j.circuitbreaker.instances.billingService.wait-duration-in-open-state=10s

# In half-open state, it allows 3 test calls through. If all succeed ? breaker closes (normal traffic resumes). If any fail ? breaker re-opens.
resilience4j.circuitbreaker.instances.billingService.permitted-number-of-calls-in-half-open-state=3

# After the 10 seconds, the breaker automatically moves to half-open (instead of waiting for a manual reset). This lets the system self-heal.
resilience4j.circuitbreaker.instances.billingService.automatic-transition-from-open-to-half-open-enabled=true


# Retry
# For each call, try up to 2 times (1 original call + 1 retry). If the first attempt fails, it retries once before failing completely
resilience4j.retry.instances.billingRetry.max-attempts=2

# Wait 500 milliseconds between retries.
resilience4j.retry.instances.billingRetry.wait-duration=500ms
